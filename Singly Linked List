class node():
    def __init__(self,data):
        self.data=data
        self.next=None
class singlyll():
    def __init__(self):
        self.head=None
    def traversal(self):
        if self.head is None:
            print("The linked list is empty")
        else:
            a=self.head
            while a is not None:
                print(a.data,end=" ")
                a=a.next
    def insertion_at_beginning(self):
        print()
        nb=node(25)
        nb.next=self.head
        self.head=nb 
    def insertion_at_end(self):
        print()
        ne=node(30)
        a=self.head
        while a.next is not None:
            a=a.next
        a.next=ne
    def insertion_at_position(self,position,data):
        print()
        nib=node(data)
        a=self.head
        for i in range(1,position-1):
            a=a.next
        nib.next=a.next
        a.next=nib
    def deletion_at_beginning(self):
        print()
        a=self.head
        self.head=a.next
        a.next=None
    def deletion_at_end(self):
        print()
        prev=self.head
        a=self.head.next
        while a.next is not None:
            a=a.next
            prev=prev.next
        prev.next=None
    def deletion_at_specified_node(self,position):
        print()
        prev=self.head
        a=self.head.next
        for i in range(1,position-1):
            a=a.next
            prev=prev.next
        prev.next=a.next
        a.next=None
n1=node(5)
obj=singlyll()
obj.head=n1
n2=node(10)
n1.next=n2
n3=node(15)
n2.next=n3
n4=node(20)
n3.next=n4
obj.traversal()
obj.insertion_at_beginning()
obj.traversal()
obj.insertion_at_end()
obj.traversal()
obj.insertion_at_position(3,7)
obj.traversal()
obj.deletion_at_beginning()
obj.traversal()
obj.deletion_at_end()
obj.traversal()
obj.deletion_at_specified_node(3)
obj.traversal()
